#!/bin/bash

prog=$0
err=false


green='\e[0;32m'
yellow='\e[1;33m'
red='\e[0;31m'
blue='\e[0;34m'
purple='\e[0;35m'
reset='\e[0m'

usage() {
	echo Usage: $prog \<program\> \[program\]*
}

# param:
# $1 prog name
unknown() {
	echo -e [$blue$1$reset]$red skipped unknown program$reset
}

# param:
# $1 prog name
# $2 file name/path
dupf() { # duplicate file, file already exists
	echo -e [$blue$1$reset] [$purple$2$reset]$yellow skipped: already exists$reset
}

# param:
# $1 prog name
# $2 file name/path
insf() { # installed file
	echo -e [$blue$1$reset] [$purple$2$reset]$green installed$reset
}

# param:
# $1 prog name
# $2 file name/path
rembl() { # removed broken link
	echo -e [$blue$1$reset] [$purple$2$reset]$red removed broken link to \'$3\'$reset
}

# param:
# $1 prog name
# $2 file/directory name/path
creatf() {
	echo -e [$blue$1$reset] [$purple$2$reset]$green created$reset
}

# param:
# $1 prog name
# $2 file target path
# $3 relative file source path
lnifne() { # link if not exists, if link broken overwrite
	if [ ! -e $2 ]; then
		if [ -L $2 ]; then
			link=$(readlink $2)
			rm $2 && rembl $1 $2 $link
		fi
		ln -s $3 $2 && insf $1 $2
	else
		dupf $1 $2
	fi
}

# param:
# $1 prog name
# $2 directory name
mdifne() {
	if [ ! -e $2 ]; then
		mkdir $2  && creatf $1 $2
	else
		dupf $1 $2
	fi
}

# param:
# $1 prog name
# $2 directory name
mdifnes() { # fail silently
	if [ ! -e $2 ]; then
		mkdir $2  && creatf $1 $2
	fi
}

if [ $# -lt 1 ]; then
	usage
	exit
fi

case $1 in
	-h|--help)
		usage
		exit
		;;
	-|--)
		echo unknown option $1
		echo Use \'$0 --help\' to show available programs
		exit
		;;
esac

while true; do
	if [ -z $1 ]; then
		break
	fi

	idir="$HOME/.dotfiles/_run/i.d"
	if [ -d "$idir/$1" ]; then
		for file in `find "$idir/$1" -mindepth 1 -maxdepth 1 -printf '%f\n'`; do
			set -- "$@" "$file"
		done
	elif [ -f "$idir/$1" ]; then
		source "$idir/$1"
	else
		unknown $1
	fi

	shift
done
